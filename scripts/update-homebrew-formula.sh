#!/bin/bash
set -euo pipefail

# Script to update the Homebrew formula in the tap repository
# Usage: ./scripts/update-homebrew-formula.sh <version>
# Example: ./scripts/update-homebrew-formula.sh 0.3.1

VERSION="${1:-}"

if [ -z "$VERSION" ]; then
  echo "Usage: $0 <version>"
  echo "Example: $0 0.3.1"
  exit 1
fi

# Remove 'v' prefix if present
VERSION="${VERSION#v}"

REPO="scttfrdmn/aws-jupyter"
TAP_REPO="scttfrdmn/homebrew-tap"
BASE_URL="https://github.com/${REPO}/releases/download/v${VERSION}"

echo "Updating Homebrew formula for version ${VERSION}..."

# Fetch checksums from the release
echo "Fetching checksums..."
CHECKSUMS_URL="${BASE_URL}/checksums.txt"
CHECKSUMS=$(curl -fsSL "$CHECKSUMS_URL")

# Extract SHA256 for each platform (try new format first, fall back to old format)
DARWIN_AMD64_SHA=$(echo "$CHECKSUMS" | grep -E "(Darwin_x86_64|darwin_amd64).tar.gz" | awk '{print $1}')
DARWIN_ARM64_SHA=$(echo "$CHECKSUMS" | grep -E "(Darwin_arm64|darwin_arm64).tar.gz" | awk '{print $1}')
LINUX_AMD64_SHA=$(echo "$CHECKSUMS" | grep -E "(Linux_x86_64|linux_amd64).tar.gz" | awk '{print $1}')
LINUX_ARM64_SHA=$(echo "$CHECKSUMS" | grep -E "(Linux_arm64|linux_arm64).tar.gz" | awk '{print $1}')

if [ -z "$DARWIN_AMD64_SHA" ] || [ -z "$DARWIN_ARM64_SHA" ] || [ -z "$LINUX_AMD64_SHA" ] || [ -z "$LINUX_ARM64_SHA" ]; then
  echo "Error: Could not fetch all required checksums"
  exit 1
fi

echo "✓ Checksums fetched successfully"

# Create the formula file
FORMULA_FILE=$(mktemp)
cat > "$FORMULA_FILE" << EOF
# typed: false
# frozen_string_literal: true

# This file is maintained manually. Updates are generated by scripts/update-homebrew-formula.sh

class AwsJupyter < Formula
  desc "CLI tool for launching Jupyter Lab instances on AWS EC2 Graviton processors"
  homepage "https://github.com/${REPO}"
  version "${VERSION}"
  license "Apache-2.0"

  on_macos do
    on_intel do
      url "${BASE_URL}/aws-jupyter_Darwin_x86_64.tar.gz"
      sha256 "${DARWIN_AMD64_SHA}"

      def install
        bin.install "aws-jupyter"
        pkgshare.install "environments"
      end
    end
    on_arm do
      url "${BASE_URL}/aws-jupyter_Darwin_arm64.tar.gz"
      sha256 "${DARWIN_ARM64_SHA}"

      def install
        bin.install "aws-jupyter"
        pkgshare.install "environments"
      end
    end
  end

  on_linux do
    on_intel do
      if Hardware::CPU.is_64_bit?
        url "${BASE_URL}/aws-jupyter_Linux_x86_64.tar.gz"
        sha256 "${LINUX_AMD64_SHA}"

        def install
          bin.install "aws-jupyter"
          pkgshare.install "environments"
        end
      end
    end
    on_arm do
      if Hardware::CPU.is_64_bit?
        url "${BASE_URL}/aws-jupyter_Linux_arm64.tar.gz"
        sha256 "${LINUX_ARM64_SHA}"

        def install
          bin.install "aws-jupyter"
          pkgshare.install "environments"
        end
      end
    end
  end

  test do
    system "#{bin}/aws-jupyter", "--version"
  end
end
EOF

echo "✓ Formula generated"

# Clone the tap repository
TAP_DIR=$(mktemp -d)
echo "Cloning tap repository..."
gh repo clone "$TAP_REPO" "$TAP_DIR"

# Copy the formula
mkdir -p "$TAP_DIR/Formula"
cp "$FORMULA_FILE" "$TAP_DIR/Formula/aws-jupyter.rb"

# Commit and push
cd "$TAP_DIR"
git add Formula/aws-jupyter.rb
git commit -m "chore: update aws-jupyter formula to v${VERSION}

Auto-generated by scripts/update-homebrew-formula.sh

Release: https://github.com/${REPO}/releases/tag/v${VERSION}"

echo ""
echo "Formula updated locally. Review changes:"
git show HEAD

echo ""
read -p "Push changes to GitHub? (y/N) " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
  git push origin main
  echo "✓ Formula pushed to ${TAP_REPO}"
  echo ""
  echo "Users can now install with:"
  echo "  brew upgrade aws-jupyter"
else
  echo "Changes not pushed. You can manually push from: $TAP_DIR"
fi

# Cleanup
rm -f "$FORMULA_FILE"
echo ""
echo "Done!"
