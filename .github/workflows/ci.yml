name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go: ['1.22', '1.23']
        module: ['pkg', 'jupyter', 'rstudio']

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}

      - name: Get dependencies (pkg)
        if: matrix.module == 'pkg'
        run: |
          cd pkg
          go mod download

      - name: Get dependencies (jupyter)
        if: matrix.module == 'jupyter'
        run: |
          cd apps/jupyter
          go mod download

      - name: Get dependencies (rstudio)
        if: matrix.module == 'rstudio'
        run: |
          cd apps/rstudio
          go mod download

      - name: Run tests (pkg)
        if: matrix.module == 'pkg'
        run: |
          cd pkg
          go test -v -race ./...

      - name: Run tests (jupyter)
        if: matrix.module == 'jupyter'
        run: |
          cd apps/jupyter
          go test -v -race ./...

      - name: Run tests (rstudio)
        if: matrix.module == 'rstudio'
        run: |
          cd apps/rstudio
          go test -v -race ./... || echo "No tests yet"

      # Coverage upload disabled - codecov integration can be re-enabled later if needed
      # - name: Upload coverage to Codecov
      #   if: matrix.go == '1.22'
      #   uses: codecov/codecov-action@v4
      #   with:
      #     file: ./${{ matrix.module == 'pkg' && 'pkg' || format('apps/{0}', matrix.module) }}/coverage.out
      #     flags: ${{ matrix.module }}
      #     fail_ci_if_error: false

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Run gofmt
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files need formatting:"
            gofmt -s -l .
            exit 1
          fi

      - name: Run go vet (pkg)
        run: |
          cd pkg
          go vet ./...

      - name: Run go vet (jupyter)
        run: |
          cd apps/jupyter
          go vet ./...

      - name: Run go vet (rstudio)
        run: |
          cd apps/rstudio
          go vet ./...

      - name: Run golangci-lint (pkg)
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          working-directory: pkg
          args: --timeout=5m

      - name: Run golangci-lint (jupyter)
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          working-directory: apps/jupyter
          args: --timeout=5m

      - name: Run golangci-lint (rstudio)
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          working-directory: apps/rstudio
          args: --timeout=5m

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: ['jupyter', 'rstudio']

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22'

      - name: Build ${{ matrix.app }} binary
        run: |
          cd apps/${{ matrix.app }}
          go build -v ./cmd/aws-${{ matrix.app }}

      - name: Test ${{ matrix.app }} binary help
        run: |
          cd apps/${{ matrix.app }}
          ./aws-${{ matrix.app }} --help

      - name: Test ${{ matrix.app }} binary version
        run: |
          cd apps/${{ matrix.app }}
          ./aws-${{ matrix.app }} --version
